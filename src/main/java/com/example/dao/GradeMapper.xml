<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.dao.GradeMapper">

    <resultMap type="grade" id="result">
        <id property="id" column="id" />
        <result property="question_id" column="question_id" />
        <result property="member_id" column="member_id" />
        <result property="question_type" column="question_type" />
        <result property="session_id" column="session_id" />
        <result property="answer_taskCompletion" column="answer_taskCompletion" />
        <result property="answer_fluency" column="answer_fluency" />
        <result property="answer_coherence" column="answer_coherence" />
        <result property="answer_pronounciation" column="answer_pronounciation" />
        <result property="answer_grammar" column="answer_grammar" />
        <result property="score" column="score" />
        <result property="isMarked" column="isMarked" />
        <result property="answer_memo" column="answer_memo" />
    </resultMap>



    <select id="getAllGrades" resultType="grade" resultMap="result"  >
        select * from grade
    </select>

    <insert id="insertGrade" parameterType="grade" keyProperty="id" useGeneratedKeys="true">
        INSERT INTO grade (question_id,  member_id ,  question_type
        <if test="session_id != null">, session_id</if>
        <if test="answer_taskCompletion != null">,  answer_taskCompletion</if>
        <if test="answer_fluency != null"> , answer_fluency</if>
        <if test="answer_coherence != null">,answer_coherence</if>
        <if test="answer_pronounciation != null">,  answer_pronounciation</if>
        <if test="answer_languageUse != null">, answer_languageUse</if>
        <if test="answer_grammar != null"> , answer_grammar</if>
        <if test="isMarked != null"> ,isMarked </if>
        <if test="answer_memo != null">, answer_memo</if>
        <if test="Logic != null">,Logic</if>
        <if test="Mechanics"> , Mechnics</if>
        <if test="Content != null">, Content </if>
        <if test="score != null"> ,score</if>) values ( #{question_id} , #{ member_id} ,  #{question_type}
        <if test="session_id != null">, #{session_id}</if>
        <if test="answer_taskCompletion != null">, #{answer_taskCompletion}</if>
        <if test="answer_fluency != null"> , #{answer_fluency}</if>
        <if test="answer_coherence != null">, #{answer_coherence}</if>
        <if test="answer_pronounciation != null">, #{answer_pronounciation} </if>
        <if test="answer_languageUse != null">,#{answer_languageUse}</if>
        <if test="answer_grammar != null"> ,  #{answer_grammar}</if>
        <if test="isMarked != null"> , #{isMarked}</if>
        <if test="answer_memo != null">, #{answer_memo}</if>
        <if test="Logic != null">, #{Logic}</if>
        <if test="Mechanics"> ,  #{Mechanics}</if>
        <if test="Content != null">, #{Content} </if>
        <if test="score != null"> ,  #{score} </if> )
         on    DUPLICATE KEY UPDATE
             question_id = #{question_id},  member_id =#{ member_id},
             question_type = #{question_type}
        <if test="session_id != null">,session_id =#{session_id}</if>
        <if test="answer_taskCompletion != null"> ,answer_taskCompletion =#{answer_taskCompletion}</if>
        <if test="answer_fluency != null">, answer_fluency =#{answer_fluency}</if>
        <if test="answer_coherence != null"> ,answer_coherence =#{answer_coherence}</if>
        <if test="answer_pronounciation != null">,  answer_pronounciation = #{answer_pronounciation}</if>
        <if test="answer_languageUse != null">,answer_languageUse = #{answer_languageUse}</if>
        <if test="answer_grammar != null">  , answer_grammar =#{answer_grammar}</if>
        <if test="isMarked != null">,isMarked =#{isMarked} </if>
        <if test="answer_memo != null"> , answer_memo = #{answer_memo}</if>
        <if test="Logic != null">, Logic =#{Logic}</if>
        <if test="Mechanics">  ,Mechnics = #{Mechanics}</if>
        <if test="Content != null"> , Content =#{Content}</if>
        <if test="score != null"> ,score =#{score};</if>
    </insert>


    <update id="updateGrade" parameterType="grade">
        UPDATE grade SET question_id = #{question_id},  member_id = #{member_id},question_type = #{question_type},
                         session_id = #{session_id}, answer_taskCompletion = #{answer_taskCompletion},
                         answer_fluency=#{answer_fluency},answer_coherence=#{answer_coherence},answer_pronounciation=#{answer_pronounciation},
                         answer_grammar=#{answer_grammar},score=#{score},isMarked=#{isMarked},
                         answer_memo=#{answer_memo}
        WHERE id = #{id}
    </update>

    <delete id="deleteGrade" parameterType="int">
        DELETE FROM grade WHERE id = #{id}
    </delete>

    <select id="findGradeById" parameterType="int" resultType="grade" resultMap="result">
        SELECT * FROM grade WHERE id = #{id}
    </select>


    <select id="studentScoresListTypeTotal"   resultType="map"  >
--         SELECT m.member_id id,m.member_name name, g.question_type type,g.question_id qId,
--                IFNULL(g.answer_taskCompletion,0)+IFNULL(g.answer_fluency,0)+IFNULL(g.answer_coherence,0)+IFNULL(g.answer_pronounciation,0)+IFNULL(g.answer_languageUse,0)+
--                IFNULL(g.answer_grammar,0)+IFNULL(g.Logic,0)+IFNULL(g.Mechnics,0)+IFNULL(g.Content,0) TSCORE
--         FROM  grade g inner join  member m on m.member_id= g.member_id;

WITH NewScores AS (SELECT DISTINCT m.member_id,m.member_name,(select GROUP_CONCAT(CONCAT('[',g.question_type,'=',IFNULL(g.answer_taskCompletion,0)
    +IFNULL(g.answer_fluency,0)+IFNULL(g.answer_coherence,0)+IFNULL(g.answer_pronounciation,0)+IFNULL(g.answer_languageUse,0)+
                                                                                                                 IFNULL(g.answer_grammar,0)+IFNULL(g.Logic,0)+IFNULL(g.Mechnics,0)+IFNULL(g.Content,0),"]")) from grade g where (m.member_id = g.member_id)
                                                              group by (g.member_id)  ) as SCORES FROM  member m inner join
                                                                                                        member a on m.member_id=a.member_id) select * from NewScores where NewScores.SCORES is not null
    </select>

</mapper>